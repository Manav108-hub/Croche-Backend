generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Size {
  small
  medium
  large
}

model User {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String       @unique
  password    String
  isAdmin     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  orders      Order[]
  userDetails UserDetails?
  cart        Cart?        // One user can have only one active cart
}

model UserDetails {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  address   String
  city      String
  pincode   Int
  country   String
  phone     String
  orders    Order[]  // Added this to connect orders to user details
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @unique @db.ObjectId  // One cart per user
  user      User        @relation(fields: [userId], references: [id])
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int      @default(1)
  size      Size
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, size])  // Prevent duplicate items with same size
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  userId        String      @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userDetailsId String      @db.ObjectId
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id])
  items         OrderItem[]
  totalAmount   Float
  status        OrderStatus @default(pending)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

enum OrderStatus {
  pending
  paid
  processing
  shipped
  delivered
  cancelled
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  quantity  Int
  size      Size
  price     Float    // Price at time of order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  category    String
  stock       Int         @default(0)
  description String?
  prices      Price[]
  images      Image[]
  cartItems   CartItem[]  // Products in carts
  orderItems  OrderItem[] // Products in orders
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  public_id String   // Cloudinary public ID
  url       String   // Cloudinary secure URL
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  width     Int
  height    Int
  format    String
  createdAt DateTime @default(now())
}

model Price {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  size      Size
  value     Float
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, size])  // One price per size per product
}